@{
    ViewBag.Title = "Home Page";
}

@using cosmosui.Models

<div class="btn-group btn-group-inline">

    <h5 style="margin-top: 2em;">Tenant:</h5>
    @(Html.Kendo().DropDownList()
        .Name("tenantPicker")
        .OptionLabel("--Select--")
        .DataSource(ds => ds
            .Read(r => r.Action("FilterMenuCustomization_Tenant", "Bank")))
        .Events(e => e
            .Change("changeTenant"))
    )
</div>
<br />
<br />
@(Html.Kendo().Grid<FieldMasterInfo>()
        .Name("grid")
        .AutoBind(false)
        .Columns(columns =>
        {
            columns.Bound(p => p.FieldId).Filterable(ftb => ftb.UI("fieldIdFilter"));
            columns.Bound(p => p.TenantId).Filterable(ftb => ftb.UI("customDropDownList"));
            columns.Bound(p => p.FromCountryCode).Filterable(ftb => ftb.UI("fromCCFilter"));
            columns.Bound(p => p.ToCountryCode).Filterable(ftb => ftb.UI("toCCFilter"));
            columns.Bound(p => p.BankCountryCode).Filterable(ftb => ftb.UI("bankCCFilter"));
            columns.Command(command => { command.Edit(); }).Title("Actions");
        })
        .Pageable()
        .Sortable()
        .Editable(editable => editable
            .Mode(GridEditMode.PopUp)
            .TemplateName("FieldMaster")
            .Window(w => w
                .Title("Edit Details")
                .Name("editWindow")
                .Width(900)))
        .Filterable(f => f
            .Operators(o => o
                .ForString(str => str
                    .Clear()
                    .Contains("Contains")
                    .IsEqualTo("Is equal to")))
            .Extra(false))
        .DataSource(ds => ds
            .Ajax()
            .Model(m =>
            {
                m.Id(f => f.id);
            })
            .Update(update => update.Action("EditingCustom_Update", "Bank"))
            .Read(read => read.Action("ReadItems", "Bank").Data("additionalData")))
)

<script>
    function customDropDownList(element) {
        element.kendoDropDownList({
            dataSource: new kendo.data.DataSource({
                data:
                    [
                        { Id: "AP" },
                        { Id: "CI" },
                    ]
            }),
            dataTextField: "Id",
            dataValueField: "Id",
            valuePrimitive: true
        });
    }

    var tenantId;
    function additionalData(e) {
        return { tenant: tenantId }
    }

    function changeTenant(e) {
        tenantId = this.value();
        var grid = $("#grid").data("kendoGrid");
        grid.dataSource.read();
    }

    function fieldIdFilter(element) {
        element.kendoDropDownList({
            dataSource: {
                transport: {
                    read: "@Url.Action("FilterMenuCustomization_FieldId")"

                }
            },
            dataTextField: "Text",
            dataValueField: "Value",
            optionLabel: "--Select Value--"
        });
    }
    function fromCCFilter(element) {
        element.kendoDropDownList({
            dataSource: {
                transport: {
                    read: "@Url.Action("FilterMenuCustomization_FromCC")"

                }
            },
            dataTextField: "Text",
            dataValueField: "Value",
            optionLabel: "--Select Value--"
        });
    }
    function toCCFilter(element) {
        element.kendoDropDownList({
            dataSource: {
                transport: {
                    read: "@Url.Action("FilterMenuCustomization_ToCC")"

                }
            },
            dataTextField: "Text",
            dataValueField: "Value",
            optionLabel: "--Select Value--"
        });
    }
    function bankCCFilter(element) {
    element.kendoDropDownList({
        dataSource: {
            transport: {
                read: "@Url.Action("FilterMenuCustomization_BankCC")"

            }
        },
        dataTextField: "Text",
        dataValueField: "Value",
        optionLabel: "--Select Value--"
    });
    }


</script>