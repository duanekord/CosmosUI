@{
    ViewBag.Title = "Home Page";
}

@using cosmosui.Models
@model IEnumerable<FieldMasterInfo>
<div class="btn-group btn-group-inline">

    <h5 style="margin-top: 2em;">Tenant:</h5>
    @(Html.Kendo().DropDownList()
                .Name("tenantPicker")
                .OptionLabel("--Select--")
                .DataSource(ds => ds
                    .Read(r => r.Action("FilterMenuCustomization_Tenant", "Bank")))
                .Events(e => e
                    .Change("changeOffering"))
    )
</div>
<div class="btn-group btn-group-inline">
    <h5 style="margin-top: 2em;">FieldId:</h5>
    @(Html.Kendo().DropDownList()
                .Name("fieldIdPicker")
                .OptionLabel("--Select--")
                .DataValueField("Text")
                .DataTextField("Value")
                .BindTo((System.Collections.IEnumerable)ViewBag.FieldIdNoFilter)
                .HtmlAttributes(new { style = "width:280px" })
                .Events(e => e
                    .Change("changeFieldID"))
    )
</div>
<div class="btn-group btn-group-inline" style="margin-top: 4em;">
    @(Html.Kendo().Button()
                    .Name("clearFilter")
                    .Tag("a")
                    .Icon("filter-clear")
                    .Content("Clear Filters")
                    .HtmlAttributes(new { type = "button", @class = "k-primary" })
                    .Events(e => e
                        .Click("clearFilters"))
    )
</div>

<br />
<br />
@(Html.Kendo().Grid(Model)
            .Name("grid")
            .Columns(columns =>
            {
                columns.Bound(p => p.FieldId);
                columns.Bound(p => p.TenantId).Filterable(ftb => ftb.UI("customDropDownList"));
                columns.Bound(p => p.FromCountryCode);
                columns.Bound(p => p.ToCountryCode);
                columns.Bound(p => p.BankCountryCode);
                columns.Command(command => { command.Edit(); }).Title("Actions");
            })
            .DataSource(ds => ds
                .Ajax()
                .ServerOperation(false)
                .Model(m =>
                {
                    m.Id(f => f._ts);
                })
                .Update(update => update.Action("EditingCustom_Update", "Bank")))
            .Pageable()
            .Sortable()
            .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("FieldMaster"))
            .Filterable(f => f
                .Operators(o => o
                    .ForString(str => str
                        .Clear()
                        .Contains("Contains")
                        .IsEqualTo("Is equal to")))
                .Extra(false))
)

<script>
    function customDropDownList(element) {
        element.kendoDropDownList({
            dataSource: new kendo.data.DataSource({
                data:
                    [
                        { Id: "ALL" },
                        { Id: "AP" },
                        { Id: "CI" },
                    ]
            }),
            dataTextField: "Id",
            dataValueField: "Id",
            valuePrimitive: true
        });
    }

    function changeOffering() {
        var val = $("#tenantPicker").val();

        var filterField = "TenantId";

        // get the kendoGrid element.
        var gridData = $("#grid").data("kendoGrid");

        // get currently applied filters from the Grid.
        var currGridFilterObj = gridData.dataSource.filter();

        // get current set of filters, which is supposed to be array.
        // if the oject we obtained above is null/undefined, set this to an empty array
        var currentGridFilters = currGridFilterObj ? currGridFilterObj.filters : [];

        // iterate over current filters array. if a filter for "filterField" is already
        // defined, remove it from the array
        // once an entry is removed, we stop looking at the rest of the array.
        if (currentGridFilters && currentGridFilters.length > 0) {
            for (var i = 0; i < currentGridFilters.length; i++) {
                if (currentGridFilters[i].field == filterField) {
                    currentGridFilters.splice(i, 1);
                    break;
                }
            }
        }

        currentGridFilters.push({ field: filterField, operator: "eq", value: val });

        // finally, the currentFilters array is applied back to the Grid, using "and" logic.
        gridData.dataSource.filter({ logic: "and", filters: currentGridFilters });

        @*$.ajax({
            // edit to add steve's suggestion.
            //url: "/ControllerName/ActionName",
            url: @Url.Action("ActionName", "Bank"),
            data: val,
            success: function (data) {
                // your data could be a View or Json or what ever you returned in your action method
                // parse your data here
                alert(data);
            }
        });*@

    }

    function changeFieldID() {
        var val = $("#fieldIdPicker").val();

        var filterField = "FieldId";

        // get the kendoGrid element.
        var gridData = $("#grid").data("kendoGrid");

        // get currently applied filters from the Grid.
        var currGridFilterObj = gridData.dataSource.filter();

        // get current set of filters, which is supposed to be array.
        // if the oject we obtained above is null/undefined, set this to an empty array
        var currentGridFilters = currGridFilterObj ? currGridFilterObj.filters : [];

        // iterate over current filters array. if a filter for "filterField" is already
        // defined, remove it from the array
        // once an entry is removed, we stop looking at the rest of the array.
        if (currentGridFilters && currentGridFilters.length > 0) {
            for (var i = 0; i < currentGridFilters.length; i++) {
                if (currentGridFilters[i].field == filterField) {
                    currentGridFilters.splice(i, 1);
                    break;
                }
            }
        }

        currentGridFilters.push({ field: filterField, operator: "eq", value: val });

        // finally, the currentFilters array is applied back to the Grid, using "and" logic.
        gridData.dataSource.filter({ logic: "and", filters: currentGridFilters });
    }

    function clearFilters() {
        var gridData = $("#grid").data("kendoGrid");

        // get currently applied filters from the Grid.
        var currGridFilterObj = gridData.dataSource.filter();

        // get current set of filters, which is supposed to be array.
        // if the oject we obtained above is null/undefined, set this to an empty array
        var currentGridFilters = currGridFilterObj ? currGridFilterObj.filters : [];

        // iterate over current filters array. if a filter for "filterField" is already
        // defined, remove it from the array
        // once an entry is removed, we stop looking at the rest of the array.
        for (var i = 0; i <= currentGridFilters.length; i++) {
            currentGridFilters.splice(i);
        }

        // finally, the currentFilters array is applied back to the Grid, using "and" logic.
        gridData.dataSource.filter({ logic: "and", filters: currentGridFilters });

        var slPicker = $("#tenantPicker").val("").data("kendoDropDownList").text("--Select--");
        var offeringPicker = $("#fieldIdPicker").val("").data("kendoDropDownList").text("--Select--");
    }


</script>
